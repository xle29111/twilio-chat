name: Generate Release

on:
  workflow_dispatch:
    inputs:
      new_release_tag:
        description: 'Enter the new release tag version'
        required: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Get latest release
      env:
        GH_TOKEN: ${{ github.token }}  
      run: |
        # Obtiene el tag del Ãºltimo release o establece un valor por defecto
        latest_release=$(gh release list --limit 1 | awk '{print $1}' || echo "")
        
        if [ -z "$latest_release" ]; then
          # Si no hay releases, usa el primer commit
          latest_release=$(git rev-list --max-parents=0 HEAD)
          echo "No existing releases found, using initial commit: $latest_release"
        else
          echo "Latest release: $latest_release"
        fi
        
        echo "LATEST_RELEASE=$latest_release" >> $GITHUB_ENV

    - name: Create release notes
      id: create_release_notes
      shell: bash
      run: |
        new_release_tag=${{ github.event.inputs.new_release_tag }}
        latest_release=$LATEST_RELEASE

        # Obtiene las carpetas modificadas
        MODIFIED_FOLDERS=$(git diff --name-only $latest_release $new_release_tag -- my-project/resources | awk -F/ '{print $3}' | sort -u | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g')

        # Crea el archivo de notas del release
        echo "Release $new_release_tag" > release_notes.txt
        echo "" >> release_notes.txt
        echo "Changes since $latest_release:" >> release_notes.txt
        echo "" >> release_notes.txt
        echo "Modified folders: $MODIFIED_FOLDERS" >> release_notes.txt
        echo "" >> release_notes.txt
        git log --pretty=format:"- %h %s" $latest_release..$new_release_tag >> release_notes.txt

        cat release_notes.txt

    - name: Create or update release using GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Verificar si el release ya existe
        if gh release view ${{ github.event.inputs.new_release_tag }} > /dev/null 2>&1; then
          echo "Release exists, updating to full release..."
          gh release edit ${{ github.event.inputs.new_release_tag }} \
            --title "${{ github.event.inputs.new_release_tag }}" \
            --notes-file release_notes.txt \
            --prerelease=false
        else
          echo "Creating new release..."
          gh release create ${{ github.event.inputs.new_release_tag }} \
            --title "${{ github.event.inputs.new_release_tag }}" \
            --notes-file release_notes.txt
        fi