name: Detect Changes Between Tags

on:
  workflow_dispatch:
    inputs:
      new_release_tag:
        description: 'Enter the new release tag version'
        required: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Get latest release
      env:
        GH_TOKEN: ${{ github.token }}  
      run: |
        latest_release=$(gh release view --json tagName -q '.tagName')
        echo "Latest release: $latest_release"
        echo "LATEST_RELEASE=$latest_release" >> $GITHUB_ENV

    - name: Detect changes between tags
      shell: bash
      run: |
        set -o pipefail
        new_release_tag=${{ github.event.inputs.new_release_tag }}
        latest_release=$LATEST_RELEASE

        echo "Comparing changes between $latest_release and $new_release_tag..."

        # Obtener todos los tags entre las versiones (incluyendo las de inicio y fin)
        all_tags=$(git tag --sort=-v:refname | awk -v start="$latest_release" -v end="$new_release_tag" '
          $0 == start {in_range=1}
          in_range {print; if ($0 == end) exit}
        ')

        # Verificar que tenemos tags en el rango
        if [ -z "$all_tags" ]; then
          echo "No tags found between $latest_release and $new_release_tag"
          exit 1
        fi

        # Obtener cambios para cada tag en el rango
        changes=""
        prev_tag=$latest_release
        while IFS= read -r tag; do
          if [ "$tag" != "$latest_release" ]; then
            commit_msg=$(git log --pretty=format:"%s" $prev_tag..$tag -- my-project/resources | head -n 1 || echo "")
            if [ -n "$commit_msg" ]; then
              changes+="$tag"$'\n'"$commit_msg"$'\n\n'
            fi
            prev_tag=$tag
          fi
        done <<< "$all_tags"

        # Codificar para GITHUB_ENV
        encoded_changes=$(printf "%s" "$changes" | sed -e ':a' -e 'N' -e '$!ba' -e 's/%/%25/g' -e 's/\n/%0A/g' -e 's/\r/%0D/g')
        echo "CHANGES=${encoded_changes}" >> $GITHUB_ENV
        echo "Detected changes:"
        printf "%s" "$changes"

    - name: Create release notes
      id: create_release_notes
      shell: bash
      run: |
        # Decodificar cambios
        changes="${CHANGES//'%0A'/$'\n'}"
        changes="${changes//'%0D'/$'\r'}"
        changes="${changes//'%25'/'%'}"

        # Crear archivo de notas
        echo "## Changes between $LATEST_RELEASE and ${{ github.event.inputs.new_release_tag }}" > release_notes.txt
        echo "" >> release_notes.txt
        printf "%s" "$changes" >> release_notes.txt

        cat release_notes.txt

    - name: Create new release using GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ github.event.inputs.new_release_tag }} \
          --title "${{ github.event.inputs.new_release_tag }}" \
          --notes-file release_notes.txt