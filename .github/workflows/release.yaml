on:
  workflow_dispatch:
    inputs:
      new_release_tag:
        description: 'Enter the new release tag version'
        required: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Get latest release
      env:
        GH_TOKEN: ${{ github.token }}  
      run: |
        # Obtiene el tag del último release
        latest_release=$(gh release view --json tagName -q '.tagName')

        echo "Latest release: $latest_release"
        
        # Exporta latest_release como variable de ambiente
        echo "LATEST_RELEASE=$latest_release" >> $GITHUB_ENV  

    - name: Detect changes between tags
      shell: bash
      run: |
        new_release_tag=${{ github.event.inputs.new_release_tag }}
        latest_release=$LATEST_RELEASE

        echo "New release: $new_release_tag"
        echo "Latest release: $latest_release"
        
        echo "Comparing changes between $new_release_tag and $latest_release..."

        # Genera los cambios con los encabezados de los tags a los cuales pertenecen los commits
        changes=$(git log $latest_release..$new_release_tag --pretty=format:"%h %s" -- my-project/resources | awk '{
          cmd = "git describe --tags --abbrev=0 " $1;
          cmd | getline tag;
          close(cmd);
          if (tag != prev_tag) {
            print tag;
            prev_tag = tag;
          }
          print "• " $2;
        }')

        # Escapa los caracteres especiales
        changes="${changes//'%'/'%25'}"
        changes="${changes//$'\n'/'%0A'}"
        changes="${changes//$'\r'/'%0D'}"

        echo "CHANGES=${changes}" >> $GITHUB_ENV
        echo "Detected changes: ${changes}"

    - name: Create release notes
      id: create_release_notes
      shell: bash
      run: |
        new_release_tag=${{ github.event.inputs.new_release_tag }}
        latest_release=$LATEST_RELEASE
        changes="${CHANGES//'%0A'/$'\n'}"
        changes="${changes//'%0D'/$'\r'}"
        changes="${changes//'%25'/'%'}"

        # Crea un archivo temporal para las notas del release
        echo "Changes detected in this release:" > release_notes.txt
        echo "" >> release_notes.txt
        echo "$changes" >> release_notes.txt

        # Muestra el contenido del archivo de notas del release
        cat release_notes.txt

    - name: Create new release using GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ github.event.inputs.new_release_tag }} \
          --title "${{ github.event.inputs.new_release_tag }}" \
          --notes-file release_notes.txt