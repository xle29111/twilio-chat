name: Rollback Workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter the version to rollback to'
        required: true
        type: string
      flow:
        description: 'Flow to rollback (e.g., chat, CCO MS, CCO PS, all)'
        required: false
        type: string

jobs:
  rollback:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository and fetch all commit history
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all commit history

      # Step 2: Verify the input version exists
      - name: Verify input version
        id: verify-version
        run: |
          VERSION=${{ github.event.inputs.version }}
          if ! git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Error: Version '$VERSION' does not exist."
            exit 1
          fi
          echo "Version '$VERSION' exists."

      # Step 3: Get the previous commit before the specified version
      - name: Get previous commit
        id: get-previous-commit
        run: |
          VERSION=${{ github.event.inputs.version }}
          PREVIOUS_COMMIT=$(git rev-list -n 1 "$VERSION^1")
          echo "Previous commit: $PREVIOUS_COMMIT"
          echo "::set-output name=previous_commit::$PREVIOUS_COMMIT"

      # Step 4: Detect changes between the specified version and the previous commit
      - name: Detect changes
        id: detect-changes
        run: |
          VERSION=${{ github.event.inputs.version }}
          PREVIOUS_COMMIT=${{ steps.get-previous-commit.outputs.previous_commit }}
          CHANGED_FILES=$(git diff --name-only "$PREVIOUS_COMMIT" "$VERSION")

          # Create a file to save the affected folders
          for FOLDER in my-project/resources/chat my-project/resources/CCO\ MS my-project/resources/CCO\ PS; do
            if echo "$CHANGED_FILES" | grep -q "$FOLDER/"; then
              echo "$FOLDER" >> changed_folders.txt
            fi
          done

          # Display the content of the file (for debugging)
          if [ -f changed_folders.txt ]; then
            cat changed_folders.txt
          else
            echo "No changes detected in the specified folders."
            exit 0
          fi

      # Step 5: Prompt user to choose flow if multiple changes detected
      - name: Prompt user for flow selection
        id: prompt-flow
        if: ${{ steps.detect-changes.outputs.changed_folders.txt }}
        run: |
          CHANGED_FOLDERS=$(cat changed_folders.txt)
          echo "::set-output name=changed_folders::$CHANGED_FOLDERS"
          echo "Changed folders: $CHANGED_FOLDERS"

      # Step 6: Rollback based on user input or detected changes
      - name: Rollback based on changes
        if: success()
        run: |
          FLOW=${{ github.event.inputs.flow }}
          CHANGED_FOLDERS=${{ steps.prompt-flow.outputs.changed_folders }}

          if [ -z "$FLOW" ]; then
            if [ $(echo "$CHANGED_FOLDERS" | wc -l) -gt 1 ]; then
              echo "Multiple flows detected. Please specify the flow to rollback using the 'flow' input."
              exit 1
            else
              FLOW=$(echo "$CHANGED_FOLDERS" | tr -d '\n')
            fi
          fi

          rollback_flow() {
            case $1 in
              "my-project/resources/chat")
                echo "Rolling back Chat..."
                npm run deploy:chat -- --c "'chat',${{ github.event.inputs.version }},'dev'" --skip-confirmation
                ;;
              "my-project/resources/CCO MS")
                echo "Rolling back CCO MS..."
                npm run deploy:cco-ms -- --c "'CCO MS',${{ github.event.inputs.version }},'dev'" --skip-confirmation
                ;;
              "my-project/resources/CCO PS")
                echo "Rolling back CCO PS..."
                npm run deploy:cco-ms -- --c "'CCO PS',${{ github.event.inputs.version }},'dev'" --skip-confirmation
                ;;
              *)
                echo "No relevant changes detected in the folder: $1"
                ;;
            esac
          }

          if [ "$FLOW" == "all" ]; then
            while IFS= read -r FOLDER; do
              rollback_flow "$FOLDER"
            done <<< "$CHANGED_FOLDERS"
          else
            rollback_flow "my-project/resources/$FLOW"
          fi