name: Tag Modified Folders on Merge
on:
  push:
    branches:
      - main
      - RT

jobs:
  tag_changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get merged branch name and origin branch
        id: merged_branch
        if: github.ref_name == 'main'
        run: |
          # Get the hash of the merged branch
          MERGED_BRANCH=$(git log --merges -n 1 --pretty=format:'%P' | awk '{print $2}')
          echo "MERGED_BRANCH=$MERGED_BRANCH" >> $GITHUB_ENV
          echo "Merged branch (hash): $MERGED_BRANCH"

          # Get the origin branch name from merge commit message
          MERGE_COMMIT_MESSAGE=$(git log --merges -n 1 --pretty=format:'%s')
          ORIGIN_BRANCH_NAME=$(echo "$MERGE_COMMIT_MESSAGE" | sed -n 's/.*from \([^ ]*\).*/\1/p')
          echo "ORIGIN_BRANCH_NAME=$ORIGIN_BRANCH_NAME" >> $GITHUB_ENV
          echo "Origin branch: $ORIGIN_BRANCH_NAME"

      - name: Check if should create tag
        id: should_create_tag
        run: |
          if [[ "$GITHUB_REF_NAME" == "RT" && "$ORIGIN_BRANCH_NAME" == "main" ]]; then
            echo "SKIP_TAG=true" >> $GITHUB_ENV
            echo "::notice::Skipping tag creation for merge from main to RT"
          else
            echo "SKIP_TAG=false" >> $GITHUB_ENV
          fi

      - name: Get latest commit message from merged branch
        id: commit_message
        if: github.ref_name == 'main'
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B $MERGED_BRANCH 2>/dev/null || echo "No commit message found")
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Get PR author
        if: github.ref_name == 'main'
        run: |
          PR_AUTHOR=$(git log -1 --pretty=format:'%an')
          echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_ENV

      - name: Get modified folders
        if: github.ref_name == 'main'
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^my-project/resources/' || true)
          if [ -n "$CHANGED_FILES" ]; then
            MODIFIED_FOLDERS=$(echo "$CHANGED_FILES" | awk -F'/' '{print $3}' | sort -u | paste -sd ', ' - | sed 's/[[:space:]]*$//')
            echo "MODIFIED_FOLDERS=${MODIFIED_FOLDERS//$'\n'/}" >> $GITHUB_ENV
          else
            echo "MODIFIED_FOLDERS=None" >> $GITHUB_ENV
          fi

      - name: Extract package version
        if: github.ref_name == 'main'
        run: |
          PACKAGE_VERSION=$(jq -r .version package.json)
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Get latest tag (branch-aware)
        if: env.SKIP_TAG == 'false'
        id: latest_tag
        run: |
          if [[ "$GITHUB_REF_NAME" == "RT" ]]; then
            # Get tags reachable from RT branch only
            LATEST_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --merged RT --sort=-v:refname | head -n 1 || echo 'v0.0.0')
          else
            # Default to main branch tags
            LATEST_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --merged main --sort=-v:refname | head -n 1 || echo 'v0.0.0')
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "Selected tag: $LATEST_TAG (from $GITHUB_REF_NAME)"

      - name: Generate new tag
        if: env.SKIP_TAG == 'false'
        id: new_tag
        run: |
          # Check if merging into RT from non-main branch
          if [[ "$GITHUB_REF_NAME" == "RT" && "$ORIGIN_BRANCH_NAME" != "main" ]]; then
            # RT branch patch increment
            latest_tag="${LATEST_TAG}"
            IFS='.' read -r -a parts <<< "${latest_tag#v}"
            new_tag="v${parts[0]}.${parts[1]}.$((parts[2] + 1))"
            echo "RT branch patch increment: $new_tag"
            git checkout RT
          else
            # Main branch minor increment (or merge from main to RT)
            latest_tag="${LATEST_TAG}"
            IFS='.' read -r -a parts <<< "${latest_tag#v}"
            new_tag="v${parts[0]}.$((parts[1] + 1)).0"
            echo "Main branch minor increment: $new_tag"
            [[ "$GITHUB_REF_NAME" == "main" ]] && git checkout main
          fi
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV

      - name: Create and push new tag
        if: env.SKIP_TAG == 'false'
        run: |
          echo "Current branch: $(git branch --show-current)"
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          TAG_MESSAGE=$(printf "Modified folders: %s\nPackage version: %s\nPR Author: %s\nCommit message: %s\nMerged branch: %s\nOrigin branch: %s" \
            "$MODIFIED_FOLDERS" "$PACKAGE_VERSION" "$PR_AUTHOR" "$COMMIT_MESSAGE" "$MERGED_BRANCH" "$ORIGIN_BRANCH_NAME")
          git tag -a "$NEW_TAG" -m "$TAG_MESSAGE"
          git push origin "$NEW_TAG"
          echo "Pushed new tag: $NEW_TAG"