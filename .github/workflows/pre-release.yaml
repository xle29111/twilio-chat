name: Generating Pre-release

on:
  workflow_run:
    workflows: ["versioning to main and RT"]
    types:
      - completed

jobs:
  detect-changes:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        ref: RT

    - name: Get latest tag from origin
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        git fetch --all --tags
        
        # Obtenemos el tag más reciente de origin/main
        new_release_tag=$(git describe --tags --abbrev=0 origin/main 2>/dev/null || git describe --tags --abbrev=0)
        
        if [ -z "$new_release_tag" ]; then
          echo "No tags found in the repository"
          exit 1
        fi
        
        echo "New release tag: $new_release_tag"
        echo "NEW_RELEASE_TAG=$new_release_tag" >> $GITHUB_ENV

    - name: Get previous production release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        latest_release=$(gh release view --json tagName -q '.tagName')
        echo "Latest production release: $latest_release"
        echo "LATEST_RELEASE=$latest_release" >> $GITHUB_ENV

    - name: Generate release tags list
      shell: bash
      run: |
        new_release_tag=$NEW_RELEASE_TAG
        latest_release=$LATEST_RELEASE

        # Función para normalizar versiones (semver)
        normalize_version() {
          echo "$1" | sed 's/^v//i' | awk -F. '{
            printf("%d.%d.%d\n", $1,$2,$3);
          }'
        }

        # Obtenemos todos los tags y los filtramos
        release_tags=$(git tag --sort=-v:refname | while read tag; do
          norm_tag=$(normalize_version "$tag")
          norm_latest=$(normalize_version "$latest_release")
          norm_new=$(normalize_version "$new_release_tag")
          
          # Comparación usando sort -V (version sorting)
          if [[ $(echo -e "$norm_latest\n$norm_tag" | sort -V | head -1) != "$norm_tag" ]] && 
             [[ $(echo -e "$norm_tag\n$norm_new" | sort -V | head -1) == "$norm_tag" || "$norm_tag" == "$norm_new" ]]; then
            echo "$tag"
          fi
        done | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g')

        echo "RELEASE_TAGS=$release_tags" >> $GITHUB_ENV

    - name: Create release notes
      id: create_release_notes
      shell: bash
      run: |
        new_release_tag=$NEW_RELEASE_TAG
        latest_release=$LATEST_RELEASE
        release_tags=$RELEASE_TAGS

        MODIFIED_FOLDERS=$(git diff --name-only $latest_release $new_release_tag -- my-project/resources | awk -F/ '{print $3}' | sort -u | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g')

        echo "Changes detected in this release:" > release_notes.txt
        echo "" >> release_notes.txt
        echo "Modified folders: $MODIFIED_FOLDERS" >> release_notes.txt
        echo "" >> release_notes.txt
        echo "Tags that are part of this release: $release_tags" >> release_notes.txt

        cat release_notes.txt

    - name: Create new release using GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create $NEW_RELEASE_TAG \
          --title "$NEW_RELEASE_TAG" \
          --notes-file release_notes.txt \
          --prerelease