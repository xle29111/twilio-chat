name: Generating Pre-release

on:
  push:
    branches:
      - RT
    # This assumes you're merging from main to RT
    # You might want to add additional conditions if needed

jobs:
  detect-changes:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Get latest release from main
      env:
        GH_TOKEN: ${{ github.token }}  
      run: |
        # Get the latest tag from main branch
        git fetch --tags
        new_release_tag=$(git describe --tags --abbrev=0 main)
        
        echo "New release tag from main: $new_release_tag"
        echo "NEW_RELEASE_TAG=$new_release_tag" >> $GITHUB_ENV

    - name: Get previous production release
      env:
        GH_TOKEN: ${{ github.token }}  
      run: |
        # Obtiene el tag del Ãºltimo release
        latest_release=$(gh release view --json tagName -q '.tagName')

        echo "Latest production release: $latest_release"
        
        # Exporta latest_release como variable de ambiente
        echo "LATEST_RELEASE=$latest_release" >> $GITHUB_ENV  

    - name: Generate release tags list
      shell: bash
      run: |
        new_release_tag=$NEW_RELEASE_TAG
        latest_release=$LATEST_RELEASE

        # Obtiene los tags de los releases intermedios
        release_tags=$(git tag --sort=-v:refname | awk -v latest=$latest_release -v new=$new_release_tag '{
          if ($0 <= new && $0 > latest) print $0
        }' | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g')

        # Exporta release_tags como variable de ambiente
        echo "RELEASE_TAGS=$release_tags" >> $GITHUB_ENV

    - name: Create release notes
      id: create_release_notes
      shell: bash
      run: |
        new_release_tag=$NEW_RELEASE_TAG
        latest_release=$LATEST_RELEASE
        release_tags=$RELEASE_TAGS

        # Obtiene las carpetas modificadas
        MODIFIED_FOLDERS=$(git diff --name-only $latest_release $new_release_tag -- my-project/resources | awk -F/ '{print $3}' | sort -u | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g')

        # Crea un archivo temporal para las notas del release
        echo "Changes detected in this release:" > release_notes.txt
        echo "" >> release_notes.txt
        echo "Modified folders: $MODIFIED_FOLDERS" >> release_notes.txt
        echo "" >> release_notes.txt
        echo "Changes in this release: $release_tags" >> release_notes.txt

        # Muestra el contenido del archivo de notas del release
        cat release_notes.txt

    - name: Create new release using GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create $NEW_RELEASE_TAG \
          --title "$NEW_RELEASE_TAG" \
          --notes-file release_notes.txt \
          --prerelease