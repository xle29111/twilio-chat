name: Unified Versioning and Pre-release Workflow
on:
  push:
    branches:
      - main
      - RT
    # Evita ejecuciÃ³n duplicada en merges de PRs
    if: "!contains(github.event.head_commit.message, 'Merge pull request')"

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      is_main_to_rt: ${{ steps.set_merge_type.outputs.is_main_to_rt }}
      new_tag: ${{ steps.generate_tag.outputs.new_tag }}
      modified_folders: ${{ steps.get_folders.outputs.modified_folders }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get merged branch info
        id: merged_branch
        shell: bash
        run: |
          # Obtenemos el commit de merge de forma segura
          MERGE_COMMIT=$(git log --merges -n 1 --pretty=format:'%H' || echo "")
          
          if [ -z "$MERGE_COMMIT" ]; then
            echo "MERGED_BRANCH=" >> $GITHUB_ENV
            echo "ORIGIN_BRANCH_NAME=" >> $GITHUB_ENV
            echo "COMMIT_MESSAGE=No merge commit found" >> $GITHUB_ENV
            exit 0
          fi
          
          # Obtenemos la rama mergeada (segundo padre)
          MERGED_BRANCH=$(git log --pretty=%P -n 1 $MERGE_COMMIT | awk '{print $2}' || echo "")
          echo "MERGED_BRANCH=$MERGED_BRANCH" >> $GITHUB_ENV
          
          # Obtenemos el mensaje del commit escapando caracteres especiales
          MERGE_COMMIT_MESSAGE=$(git log -1 --pretty=%B $MERGE_COMMIT | tr -cd '\11\12\15\40-\176' | sed 's/"/\\"/g')
          echo "COMMIT_MESSAGE=$MERGE_COMMIT_MESSAGE" >> $GITHUB_ENV
          
          # Extraemos el nombre de la rama de origen de forma robusta
          ORIGIN_BRANCH_NAME=$(echo "$MERGE_COMMIT_MESSAGE" | grep -oE 'from\s+\S+' | awk '{print $2}' | head -1 || echo "")
          echo "ORIGIN_BRANCH_NAME=$ORIGIN_BRANCH_NAME" >> $GITHUB_ENV

      - name: Debug merge info
        run: |
          echo "Merge Commit: $MERGE_COMMIT"
          echo "Merged Branch: $MERGED_BRANCH"
          echo "Origin Branch: $ORIGIN_BRANCH_NAME"
          echo "Commit Message: $COMMIT_MESSAGE"

      - name: Set merge type flag
        id: set_merge_type
        run: |
          if [[ "$GITHUB_REF_NAME" == "RT" && "$ORIGIN_BRANCH_NAME" == "main" ]]; then
            echo "is_main_to_rt=true" >> $GITHUB_OUTPUT
          else
            echo "is_main_to_rt=false" >> $GITHUB_OUTPUT
          fi

      - name: Get PR author
        run: |
          PR_AUTHOR=$(git log -1 --pretty=format:'%an' || echo "Unknown")
          echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_ENV

      - name: Get modified folders
        id: get_folders
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- my-project/resources || true)
          if [ -n "$CHANGED_FILES" ]; then
            MODIFIED_FOLDERS=$(echo "$CHANGED_FILES" | awk -F'/' '{print $3}' | sort -u | paste -sd ', ' -)
            echo "modified_folders=${MODIFIED_FOLDERS}" >> $GITHUB_OUTPUT
            echo "MODIFIED_FOLDERS=${MODIFIED_FOLDERS}" >> $GITHUB_ENV
          else
            echo "modified_folders=None" >> $GITHUB_OUTPUT
            echo "MODIFIED_FOLDERS=None" >> $GITHUB_ENV
          fi

      - name: Get package version
        run: |
          PACKAGE_VERSION=$(jq -r .version package.json || echo "0.0.0")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Get latest tag
        run: |
          if [[ "$GITHUB_REF_NAME" == "RT" ]]; then
            LATEST_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --merged RT --sort=-v:refname | head -n 1 || echo 'v0.0.0')
          else
            LATEST_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --merged main --sort=-v:refname | head -n 1 || echo 'v0.0.0')
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Generate new tag
        id: generate_tag
        run: |
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          
          IFS='.' read -r -a parts <<< "${LATEST_TAG#v}"
          
          if [[ "$GITHUB_REF_NAME" == "RT" ]]; then
            if [[ "$ORIGIN_BRANCH_NAME" == "main" ]]; then
              new_tag="v${parts[0]}.$((parts[1] + 1)).0"
            else
              new_tag="v${parts[0]}.${parts[1]}.$((parts[2] + 1))"
            fi
            git checkout RT
          else
            new_tag="v${parts[0]}.$((parts[1] + 1)).0"
            git checkout main
          fi
          echo "new_tag=${new_tag}" >> $GITHUB_OUTPUT
          echo "NEW_TAG=${new_tag}" >> $GITHUB_ENV

      - name: Create and push tag
        if: env.NEW_TAG != ''
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          TAG_MESSAGE=$(printf "Modified folders: %s\nPackage version: %s\nPR Author: %s\nCommit message: %s" \
            "$MODIFIED_FOLDERS" "$PACKAGE_VERSION" "$PR_AUTHOR" "$COMMIT_MESSAGE")
          git tag -a "$NEW_TAG" -m "$TAG_MESSAGE"
          git push origin "$NEW_TAG"

  pre_release:
    needs: versioning
    if: needs.versioning.outputs.is_main_to_rt == 'true'
    runs-on: ubuntu-latest
    env:
      NEW_RELEASE_TAG: ${{ needs.versioning.outputs.new_tag }}
      MODIFIED_FOLDERS: ${{ needs.versioning.outputs.modified_folders }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: RT

      - name: Get previous production release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_release=$(gh release view --json tagName -q '.tagName')
          echo "LATEST_RELEASE=$latest_release" >> $GITHUB_ENV

      - name: Generate release tags list
        run: |
          new_release_tag=$NEW_RELEASE_TAG
          latest_release=$LATEST_RELEASE

          release_tags=$(git tag --sort=-v:refname | while read tag; do
            if [[ $(echo -e "${latest_release#v}\n${tag#v}" | sort -V | head -1) != "${tag#v}" ]] && 
               [[ $(echo -e "${tag#v}\n${new_release_tag#v}" | sort -V | head -1) == "${tag#v}" || "${tag#v}" == "${new_release_tag#v}" ]]; then
              echo "$tag"
            fi
          done | tr '\n' ',' | sed 's/,$//')

          echo "RELEASE_TAGS=$release_tags" >> $GITHUB_ENV

      - name: Create release notes
        run: |
          echo "Changes since $LATEST_RELEASE:" > release_notes.txt
          echo "" >> release_notes.txt
          echo "Modified folders: $MODIFIED_FOLDERS" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "Included tags: $RELEASE_TAGS" >> release_notes.txt

      - name: Create pre-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create $NEW_RELEASE_TAG \
            --title "$NEW_RELEASE_TAG" \
            --notes-file release_notes.txt \
            --prerelease