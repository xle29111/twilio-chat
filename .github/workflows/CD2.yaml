name: CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - st
          - rt
      version:
        description: 'Enter version to deploy'
        required: true
        type: string

jobs:
  deploy:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}  # Configura el ambiente dinámicamente

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install
        working-directory: my-project

      - name: Load environment variables
        run: |
          echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" > my-project/.env
          echo "API_KEY_SID=${{ secrets.API_KEY_SID }}" >> my-project/.env
          echo "API_KEY_SECRET=${{ secrets.API_KEY_SECRET }}" >> my-project/.env
          echo "TWILIO_WORKSPACE_SID=${{ secrets.TWILIO_WORKSPACE_SID }}" >> my-project/.env
          echo "STAGE=${{ github.event.inputs.environment }}" >> my-project/.env

      - name: Compare with previous commit and detect changes
        id: detect-changes
        run: |
          git fetch --tags
          TAG="${{ github.event.inputs.version }}"
          echo "Using tag: $TAG"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            PREVIOUS_COMMIT=$(git rev-list -n 1 "$TAG^1")
            echo "Previous commit: $PREVIOUS_COMMIT"
            CHANGED_FILES=$(git diff --name-only "$PREVIOUS_COMMIT" "$TAG")

            # Crear un archivo para guardar las carpetas afectadas
            for FOLDER in my-project/resources/chat my-project/resources/CCO\ MS my-project/resources/CCO\ PS; do
              if echo "$CHANGED_FILES" | grep -q "$FOLDER/"; then
                echo "$FOLDER" >> changed_folders.txt
              fi
            done

            # Mostrar el contenido del archivo (para debugging)
            if [ -f changed_folders.txt ]; then
              cat changed_folders.txt
            else
              echo "No changes detected in the specified folders."
            fi
          else
            echo "Error: Tag '$TAG' does not exist."
            exit 1
          fi

      - name: Deploy Based on Changes
        if: success()
        run: |
          if [ -f changed_folders.txt ]; then
            # Leer el archivo de carpetas afectadas
            CHANGED_FOLDERS=$(cat changed_folders.txt)

            # Función para ejecutar el comando de despliegue según la carpeta
            deploy_folder() {
              case $1 in
                "my-project/resources/chat")
                  echo "Desplegando Chat..."
                  #npm run deploy:chat -- --c "[B-389745] testing cicd" --skip-confirmation
                  ;;
                "my-project/resources/CCO MS")
                  echo "Desplegando CCO MS..."
                  #npm run deploy:cco-ms -- --c "[B-389745] testing cicd" --skip-confirmation
                  ;;
                "my-project/resources/CCO PS")
                  echo "Desplegando CCO PS..."
                  #npm run deploy:cco-ms -- --c "[B-389745] testing cicd" --skip-confirmation
                  ;;
                *)
                  echo "No se detectaron cambios relevantes en la carpeta: $1"
                  ;;
              esac
            }

            # Iterar sobre las carpetas y ejecutar el comando de despliegue correspondiente
            while IFS= read -r FOLDER; do
              if [[ "$FOLDER" == "Carpetas afectadas:" ]]; then
                continue  # Saltar la línea de encabezado
              fi
              deploy_folder "$FOLDER"
            done <<< "$CHANGED_FOLDERS"
          else
            echo "No changed folders to deploy."
          fi