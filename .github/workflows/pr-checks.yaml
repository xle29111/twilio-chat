name: PR Checks

on:
  pull_request:
    branches:
      - main
      - rt

jobs:
  up-to-date:
    name: Check branch is up-to-date
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          BASE_BRANCH=${{ github.base_ref }}
          FEATURE_BRANCH=${{ github.head_ref }}

          git fetch origin $BASE_BRANCH
          git fetch origin $FEATURE_BRANCH

          if git merge-base --is-ancestor origin/$BASE_BRANCH origin/$FEATURE_BRANCH; then
            echo "✅ Branch is up-to-date"
          else
            echo "::error::Branch is not up-to-date with base $BASE_BRANCH"
            exit 1
          fi

  version-validation:
    name: Version validation
    runs-on: ubuntu-latest
    needs: up-to-date

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base_branch

      - name: Get base version
        id: base_version
        run: |
          echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          path: pr_branch

      - name: Validate new version is greater
        run: |
          BASE_VERSION=${{ env.VERSION }}
          NEW_VERSION=$(node -p "require('./package.json').version")

          IFS='.' read -r -a BASE_ARR <<< "$BASE_VERSION"
          IFS='.' read -r -a NEW_ARR <<< "$NEW_VERSION"

          function version_gt() {
            for i in 0 1 2; do
              if [ "${NEW_ARR[i]}" -gt "${BASE_ARR[i]}" ]; then
                return 0
              elif [ "${NEW_ARR[i]}" -lt "${BASE_ARR[i]}" ]; then
                return 1
              fi
            done
            return 1
          }

          if version_gt; then
            echo "✅ New version $NEW_VERSION is valid."
          else
            echo "::error::Version $NEW_VERSION must be greater than $BASE_VERSION"
            exit 1
          fi

  json-lint:
    name: JSON Syntax and Duplicate Validation
    runs-on: ubuntu-latest
    needs: up-to-date

    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Validate flows_to_deploy.json syntax and duplicates
        run: |
          FILE="flows_to_deploy.json"
          if [ ! -f "$FILE" ]; then
            echo "::error file=$FILE::File not found"
            exit 1
          fi

          if ! jq empty "$FILE" 2> jq_error.log; then
            echo "::error file=$FILE::Invalid JSON syntax"
            cat jq_error.log
            exit 1
          fi

          DUPLICATES=$(jq -r '.[].application' "$FILE" | sort | uniq -d)
          if [ -n "$DUPLICATES" ]; then
            echo "::error file=$FILE::Duplicate application names found:"
            echo "$DUPLICATES"
            exit 1
          fi

          echo "✅ JSON syntax and duplicates validated for $FILE"

  flows-traceability:
    name: Validate flows_to_deploy.json traceability
    runs-on: ubuntu-latest
    needs: up-to-date

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base_branch

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          path: pr_branch

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Validate flows_to_deploy.json traceability
        run: |
          BASE_FLOWS="base_branch/flows_to_deploy.json"
          PR_FLOWS="pr_branch/flows_to_deploy.json"

          if [ ! -f "$BASE_FLOWS" ] || [ ! -f "$PR_FLOWS" ]; then
            echo "::error::flows_to_deploy.json missing in base or PR branch"
            exit 1
          fi

          BASE_ENABLED=$(jq -r '.[] | select(.deploy == true) | .application' "$BASE_FLOWS")

          echo "$BASE_ENABLED" | while IFS= read -r app; do
            if [ -z "$app" ]; then continue; fi

            jq -e --arg app "$app" '.[] | select(.application == $app and .deploy == true)' "$PR_FLOWS" > /dev/null
            if [ $? -ne 0 ]; then
              echo "::error::Application '$app' was deploy:true in base but is missing or not deploy:true in PR"
              exit 1
            fi
          done

          echo "✅ All previously enabled applications are still marked as deploy:true"
