name: PR checks

on:
  pull_request:
    branches:
      - main
      - rt

jobs:
  up-to-date:
    name: up-to-date
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if feature branch is up-to-date with base branch
        run: |
          BASE_BRANCH=${{ github.base_ref }}
          FEATURE_BRANCH=${{ github.head_ref }}

          echo "Base branch is: origin/$BASE_BRANCH"
          echo "Feature branch is: origin/$FEATURE_BRANCH"

          git fetch origin $BASE_BRANCH
          git fetch origin $FEATURE_BRANCH

          if git merge-base --is-ancestor origin/$BASE_BRANCH origin/$FEATURE_BRANCH; then
            echo "✅ The feature branch is up-to-date with origin/$BASE_BRANCH. Merge is allowed."
          else
            echo "❌ The feature branch is not up-to-date with origin/$BASE_BRANCH. You need to rebase or merge first."
            exit 1
          fi

  version-validation:
    name: version-validation
    runs-on: ubuntu-latest
    needs: up-to-date

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Extract base version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "BASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Validate version
        run: |
          echo "Base version (main): $BASE_VERSION"
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version (PR): $NEW_VERSION"

          IFS='.' read -ra CURRENT <<< "$BASE_VERSION"
          IFS='.' read -ra NEW <<< "$NEW_VERSION"

          if [ ${#NEW[@]} -ne 3 ]; then
            echo "::error::Version must be in format X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi

          is_valid=false

          if [ ${NEW[0]} -gt ${CURRENT[0]} ]; then
            is_valid=true
          elif [ ${NEW[0]} -eq ${CURRENT[0]} ]; then
            if [ ${NEW[1]} -gt ${CURRENT[1]} ]; then
              is_valid=true
            elif [ ${NEW[1]} -eq ${CURRENT[1]} ]; then
              if [ ${NEW[2]} -gt ${CURRENT[2]} ]; then
                is_valid=true
              fi
            fi
          fi

          if [ "$is_valid" = true ]; then
            echo "✅ Version $NEW_VERSION is valid (greater than $BASE_VERSION)"
          else
            echo "::error::Version $NEW_VERSION must be greater than $BASE_VERSION"
            echo "Valid examples:"
            echo "Major bump: $((CURRENT[0]+1)).${CURRENT[1]}.${CURRENT[2]}"
            echo "Minor bump: ${CURRENT[0]}.$((CURRENT[1]+1)).${CURRENT[2]}"
            echo "Patch bump: ${CURRENT[0]}.${CURRENT[1]}.$((CURRENT[2]+1))"
            exit 1
          fi

  config-file:
    name: config-file
    runs-on: ubuntu-latest
    needs: up-to-date

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          path: pr_branch

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base_branch

      - name: Get modified folders
        id: modified
        run: |
          echo "Detecting modified folders..."
          CHANGED_FILES=$(git diff --name-only base_branch...pr_branch | grep '^my-project/resources/' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No changes detected in my-project/resources/"
            echo "MODIFIED_FOLDERS=" >> $GITHUB_ENV
            exit 0
          fi

          MODIFIED_FOLDERS=$(echo "$CHANGED_FILES" | cut -d'/' -f3 | sort -u)
          echo "Modified folders: $MODIFIED_FOLDERS"
          echo "MODIFIED_FOLDERS<<EOF" >> $GITHUB_ENV
          echo "$MODIFIED_FOLDERS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Validate deployments
        run: |
          PR_FILE="pr_branch/flows_to_deploy.json"
          BASE_FILE="base_branch/flows_to_deploy.json"

          # Validate JSON files exist
          if [ ! -f "$PR_FILE" ] || [ ! -f "$BASE_FILE" ]; then
            echo "::error::Missing flows_to_deploy.json in one of the branches"
            exit 1
          fi

          # Case 1: No modified folders
          if [ -z "$MODIFIED_FOLDERS" ]; then
            echo "Checking deployments with no modified folders..."
            PR_DEPLOY_TRUE=$(jq -r '.[] | select(.deploy == true) | .application' "$PR_FILE")
            
            if [ -n "$PR_DEPLOY_TRUE" ]; then
              echo "::error::Cannot set deploy=true when no folders are modified"
              echo "Invalid deployments: $PR_DEPLOY_TRUE"
              exit 1
            fi
            echo "✅ No deployments attempted with no modified folders"
            exit 0
          fi

          # Case 2: Modified folders exist
          echo "Validating deployments for modified folders..."
          FAILED_CHECKS=0

          while IFS= read -r folder; do
            [ -z "$folder" ] && continue
            
            PR_DEPLOY=$(jq -r --arg f "$folder" '.[] | select(.application == $f) | .deploy' "$PR_FILE")
            BASE_DEPLOY=$(jq -r --arg f "$folder" '.[] | select(.application == $f) | .deploy' "$BASE_FILE")

            # Rule a: If not true in PR but true in base -> OK
            if [ "$PR_DEPLOY" != "true" ] && [ "$BASE_DEPLOY" == "true" ]; then
              echo "✅ $folder: Not enabled in PR but was enabled in base (allowed)"
            
            # Rule b: If not true in PR and not true in base -> FAIL
            elif [ "$PR_DEPLOY" != "true" ] && [ "$BASE_DEPLOY" != "true" ]; then
              echo "❌ $folder: Modified but not enabled in PR or base"
              FAILED_CHECKS=$((FAILED_CHECKS+1))
            
            # If true in PR -> OK (regardless of base)
            elif [ "$PR_DEPLOY" == "true" ]; then
              echo "✅ $folder: Enabled for deployment"
            fi
          done <<< "$MODIFIED_FOLDERS"

          # Check for unauthorized deployments (true in PR but not modified)
          echo "Checking for unauthorized deployments..."
          jq -r '.[] | select(.deploy == true) | .application' "$PR_FILE" | while read -r app; do
            if ! grep -qx "$app" <<< "$MODIFIED_FOLDERS"; then
              BASE_DEPLOY=$(jq -r --arg a "$app" '.[] | select(.application == $a) | .deploy' "$BASE_FILE")
              if [ "$BASE_DEPLOY" != "true" ]; then
                echo "❌ $app: Unauthorized deployment (not modified and not enabled in base)"
                FAILED_CHECKS=$((FAILED_CHECKS+1))
              else
                echo "ℹ️ $app: Already enabled in base branch (no new deployment)"
              fi
            fi
          done

          if [ $FAILED_CHECKS -gt 0 ]; then
            echo "::error::Found $FAILED_CHECKS deployment validation errors"
            exit 1
          fi

          echo "✅ All deployment validations passed"

  json-lint:
    name: json-lint
    runs-on: ubuntu-latest
    needs: up-to-date

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Validate JSON
        run: |
          echo "Validating flows_to_deploy.json..."
          if ! jq empty flows_to_deploy.json 2>jq_error.log; then
            echo "::error::Invalid JSON syntax"
            cat jq_error.log
            exit 1
          fi

          DUPLICATES=$(jq -r '.[].application' flows_to_deploy.json | sort | uniq -d)
          if [ -n "$DUPLICATES" ]; then
            echo "::error::Duplicate applications found: $DUPLICATES"
            exit 1
          fi

          echo "✅ JSON validation passed"

  flows-traceability-check:
    name: flows traceability
    runs-on: ubuntu-latest
    needs: config-file

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base_branch

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          path: pr_branch

      - name: Verify deployment continuity
        run: |
          BASE_FILE="base_branch/flows_to_deploy.json"
          PR_FILE="pr_branch/flows_to_deploy.json"

          jq -r '.[] | select(.deploy == true) | .application' "$BASE_FILE" | while read -r app; do
            PR_DEPLOY=$(jq -r --arg a "$app" '.[] | select(.application == $a) | .deploy' "$PR_FILE")
            if [ "$PR_DEPLOY" != "true" ]; then
              echo "::error::Application $app was enabled in base but disabled in PR"
              exit 1
            fi
          done

          echo "✅ Deployment continuity verified"